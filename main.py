# !/usr/bin/env python3
# Generated by Proteus Visual Designer for Raspberry Pi

# Modules
from goto import with_goto
from stddef import *
import var
import pio
import resource
from datetime import datetime

#Importaciones para comunicación serial
from time import sleep
from wiringpi import Serial

from firebase import firebase

# Peripheral Configuration Code (Do Not Edit)
import cpu
import FileStore
import VFP
import camera
import Displays
import Generic
import Controls
import RPi.GPIO as GPIO

firebase = firebase.FirebaseApplication('https://smart-lock-bc6fd-default-rtdb.firebaseio.com/', None)

#CONFIGURACIÓN PARA MANEJO DE CAMARA
def peripheral_setup () :
# Peripheral Constructors
 pio.cpu=cpu.CPU ()
 pio.storage=FileStore.FileStore ()
 pio.server=VFP.VfpServer ()
 pio.CAM1=camera.RPiCamera ()
 pio.LCD1=Displays.TFTDisplay (pio.GPIO18, pio.GPIO23)
 #pio.BTN1=Generic.Button (pio.GPIO4)
 pio.IotPhoto1=Controls.Photo ("IotPhoto1", )
 pio.IotInput1=Controls.LineEdit("IotInput1",)
 pio.storage.begin ()
 pio.server.begin (0)
 #GPIO.setmode(GPIO.BCM)
 pio.bt1 = 4
 #GPIO.setup(pio.bt1, GPIO.IN, GPIO.PUD_DOWN)
 
# Install interrupt handlers

def peripheral_loop () :
 pio.server.poll ()

def variables_setup () :
# Flowchart Variables
 var.image = ''

# Flowchart Routines
@with_goto
def chart_SETUP () :
 return

@with_goto
def chart_LOOP () :
 #while not (GPIO.input(pio.bt1)) :
  #pass

 pio.CAM1.capture (25)
 var.image = pio.CAM1.getLastImage ()
 pio.LCD1.loadImage (var.image, 0)
 pio.IotPhoto1.showImage(var.image)
 ahora = datetime.now()
 fecha = ahora.strftime("%Y - %m - %d  %H:%M:%S")
 pio.IotInput1.setText(fecha)
 return

#CONFIGURACIÓN DE COMUNICACIÓN SERIAL
baud = 9600
ser  = Serial("/dev/serial0",baud)
sleep(0.3)


def recibir(echo = True):
 data = ""
 while True:
  input = ser.getchar()
  if echo:
   ser.putchar(input)
  if input == "\r":
   return (data)
  data += input
 sleep(0.2)
  
def printsln(menss):
 ser.puts(menss+"\r")
 sleep(0.2)

def prints(menss):
 ser.puts(menss)
 sleep(0.2)
 
 
# Main function
def main () :
# Setup
 variables_setup ()
 peripheral_setup ()
 chart_SETUP ()
# Infinite loop
 while True :
  prints("Recibiendo datos..  ")
  mensaje = recibir()
  prints(mensaje)

  try:
   if int(mensaje)==1:
    peripheral_loop ()
    chart_LOOP ()
   if int(mensaje)==2:
    firebase.put("/Puerta Principal", "/Estado Puerta", "Abierto")
   if int(mensaje)==3:
    firebase.put("/Puerta Principal", "/Estado Puerta", "Cerrado")


  except:
   pass
  sleep(0.2)
  printsln("ok")
  
  
# Command line execution
if __name__ == '__main__' :
   main()
